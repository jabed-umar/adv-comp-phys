import numpy as np
import matplotlib.pyplot as plt

#Generate random number using Linear Congruential Generator
def lcg(seed: int, a: int, c: int, n: int, m: int = 2**32):
    '''
    Linear Congruential Generator
    # Parameters
    - seed: The seed value for the generator
    - a: Multiplier, range of 0 to m
    - c: Increment, range of 0 to m
    - m: Modulus, defines the range of the random numbers, default is 2^32
    - n: Number of random numbers to generate
    # Returns
    - A list of n random numbers
    '''
    random_numbers = []
    for i in range(n):
        seed = (a*seed + c) % m
        random_numbers.append(seed/m)   #it will generate random numbers between 0 to 1
    return random_numbers


# Do Monte Carlo Integration using the random numbers generated by LCG
def monte_carlo_integration(f, a: float, b: float, n: int, seed: int, a_lcg: int, c_lcg: int, m_lcg: int = 2**32):
    '''
    Monte Carlo Integration
    # Parameters
    f: The function to integrate
    - a: Lower limit of the integral
    - b: Upper limit of the integral
    - n: Number of random numbers to generate
    - seed: The seed value for the generator
    - a_lcg: Multiplier for LCG, range of 0 to m
    - c_lcg: Increment for LCG, range of 0 to m
    - m_lcg: Modulus for LCG, defines the range of the random numbers, default is 2^32
    # Returns
    - The value of the integral
    '''
    random_numbers = np.array(lcg(seed, a_lcg, c_lcg, n, m_lcg))
    integral = 0
    for i in random_numbers:
        integral += f(i*(b-a)+a)
    integral = (integral/n)*(b-a)
    return integral 


